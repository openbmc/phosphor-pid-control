{
  "comments": [
    {
      "key": {
        "uuid": "1c699ee8_91c05694",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-25T23:24:58Z",
      "side": 1,
      "message": "More details needed here.  Why is 10 millisecond too much?  Why is 1 usecond enough?  Why not 0 (no delay) why not 5 milliseconds?\n\nWhat breaks when this is set today?",
      "revId": "8fbd58c7b277f4898e6e30a066cb7c42aaa86ad6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a9722f8_c1457690",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-25T23:34:56Z",
      "side": 1,
      "message": "Actually 0 delay is desired. but I cannot find document of the exact behavior of delay \u003d 0. Does the timer put the callback in the execution queue or expired queue? Or the behavior is undefined. \n\nSo I just put a small enough value here just in case. \n\nIf delay\u003d0 is clear, I am glad to use that. \n\nBreak refer to: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-objmgr/+/41563",
      "parentUuid": "1c699ee8_91c05694",
      "revId": "8fbd58c7b277f4898e6e30a066cb7c42aaa86ad6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "060eafda_1e4a8212",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-25T23:39:10Z",
      "side": 1,
      "message": "If 0 is what we really want, we should rearrange the code such that we don\u0027t start the timer at all before initializing the loops, and only run the timer if it fails.\n\nAssuming this is an issue, 1usec makes it just a lot less likely, you need something that\u0027s completely interlocked.",
      "parentUuid": "1a9722f8_c1457690",
      "revId": "8fbd58c7b277f4898e6e30a066cb7c42aaa86ad6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da49ad8c_b8be8f2f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-25T23:50:49Z",
      "side": 1,
      "message": "\u003e If 0 is what we really want, we should rearrange the code such that we don\u0027t start the timer at all before initializing the loops, and only run the timer if it fails.\n\nOk. Sounds reasonable. Originally I didn\u0027t expect such delay will create any trouble trading for neat code. \n\n\u003e Assuming this is an issue, 1usec makes it just a lot less likely, you need something that\u0027s completely interlocked.\n\nThat is why I also proposed this fix (https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-objmgr/+/41563). The ObjectMapper shouldn\u0027t be so sensitive to implementation of other modules/processes.",
      "parentUuid": "060eafda_1e4a8212",
      "revId": "8fbd58c7b277f4898e6e30a066cb7c42aaa86ad6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "350e8ec9_5b49f3ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-25T23:58:54Z",
      "side": 1,
      "message": "\u003e \u003e If 0 is what we really want, we should rearrange the code such that we don\u0027t start the timer at all before initializing the loops, and only run the timer if it fails.\n\u003e \n\u003e Ok. Sounds reasonable. Originally I didn\u0027t expect such delay will create any trouble trading for neat code. \n\nsimple diff is different than neat code.  If we don\u0027t need the initial delay, the code can be much neater, even if the diff looks worse.\n\n\u003e \n\u003e \u003e Assuming this is an issue, 1usec makes it just a lot less likely, you need something that\u0027s completely interlocked.\n\u003e \n\u003e That is why I also proposed this fix (https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-objmgr/+/41563). The ObjectMapper shouldn\u0027t be so sensitive to implementation of other modules/processes.\n\nDisagree.  The ObjectMapper should obey the dbus interfaces, and shouldn\u0027t try to go outside of the well defined dbus behavior, rather than try to cover up subtle bugs.",
      "parentUuid": "da49ad8c_b8be8f2f",
      "revId": "8fbd58c7b277f4898e6e30a066cb7c42aaa86ad6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb1ede47_a1f8ac0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-26T00:24:25Z",
      "side": 1,
      "message": "\u003e simple diff is different than neat code.  If we don\u0027t need the initial delay, the code can be much neater, even if the diff looks worse.\n\nYou are absolutely right. \n\n\u003e Disagree.  The ObjectMapper should obey the dbus interfaces, and shouldn\u0027t try to go outside of the well defined dbus behavior, rather than try to cover up subtle bugs.\n\nBut it is rather a design problem of synchronization/data-racing than misusing of dbus. dbus doesn\u0027t know when or why you want a method call on a not-yet-created object. The correctness is based on the assumption that process execution is faster than dbus inter-process communication, which is 99.9% correct. And the retry is not just a bug-make-up, it serves similar to a spin-lock for synchronization. \n\nBTW, maybe we should move the chat to the other patch?",
      "parentUuid": "350e8ec9_5b49f3ae",
      "revId": "8fbd58c7b277f4898e6e30a066cb7c42aaa86ad6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77ec523a_f66bbb21",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2021-03-29T23:25:30Z",
      "side": 1,
      "message": "I completely remove the init delay.",
      "parentUuid": "cb1ede47_a1f8ac0e",
      "revId": "8fbd58c7b277f4898e6e30a066cb7c42aaa86ad6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}