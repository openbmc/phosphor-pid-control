{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "30fc147b_f3f2b97f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "The idea looks good, but I have some concerns. What goals is this change designed to accomplish? I\u0027m not sure what the improvement will be.\n",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "818eed9f_50789f76",
        "filename": "conf.hpp",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "I agree here that using a union is a micro-optimization that did not seem necessary. The structures don\u0027t take up that much space.",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df13e072_e0c73da1",
        "filename": "pid/pidcontroller.cpp",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "We must also continue to test for NAN here. Please do not remove the NAN test. Reason is, NAN is used as an indication of an error, a missing sensor reading, or similar.\n\nThis also reminds me of a historical bug here. We should be using std::isfinite() instead of isnan() here, because that will give us the advantage of being able to also catch other weird floating-point error states like +INF and -INF.",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f83a176_08ec7768",
        "filename": "pid/pidcontroller.cpp",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-25T01:33:49Z",
      "side": 1,
      "message": "Do you suggest that we should have the following change?\nif (std::isnan(lastInput)) \u003d\u003e if (std::isfinite(lastInput))",
      "parentUuid": "df13e072_e0c73da1",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ee36eaf_dc524e26",
        "filename": "pid/pidcontroller.cpp",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "This entire block looks like a pretty significant behavioral change. I\u0027m unsure what\u0027s going on here. What is the purpose of this change? Will it break people\u0027s existing PID loops that they already have working in their hardware?",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eff015a_0c3a2cc3",
        "filename": "pid/pidcontroller.cpp",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-20T11:54:03Z",
      "side": 1,
      "message": "Hi Josh,\n\nIn Meta OpenBMC, the PID controller would use input temperature and setpoint to check the hysteresis instead of using input temperature and last input temperature.\n\nAnd the PID controller would not calculate the output PWM if the input temperature was lower than the setpoint and will reset the integral term if the input temperature was lower than the setpoint to prevent the overshot.\n\nI think it is different behavior than existing PID loops. Should we add an option for user to choose which method they need?\n\nRef:https://github.com/facebook/openbmc/blob/helium/common/recipes-core/fscd3/fscd/fsc_control.py#L23",
      "parentUuid": "5ee36eaf_dc524e26",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c82552c1_2e4bba0b",
        "filename": "pid/pidcontroller.cpp",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T23:29:25Z",
      "side": 1,
      "message": "Yes, this should be an option. A compile-time option is fine. Reason is, I don\u0027t want to break anybody\u0027s existing PID loops, which could be very delicately tuned, by doing anything that changes the default behavior of the computations.\n\n(To contrast, adding new optional features that don\u0027t change the behavior by default, such as introducing the \"D\" term, is always completely OK, because these don\u0027t alter existing behavior.)",
      "parentUuid": "9eff015a_0c3a2cc3",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a121f5c_8a9ed93b",
        "filename": "pid/pidcontroller.cpp",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-25T01:33:49Z",
      "side": 1,
      "message": "I added a compile flag to seperate two methods to calculate PID output.",
      "parentUuid": "c82552c1_2e4bba0b",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3c480eb_b24e8218",
        "filename": "pid/zone.cpp",
        "patchSetId": 9
      },
      "lineNbr": 115,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "This new behavior should have documentation/examples documented somewhere. See also my similar comment below.",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30bd53de_d19e6595",
        "filename": "pid/zone.cpp",
        "patchSetId": 9
      },
      "lineNbr": 115,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-20T11:54:03Z",
      "side": 1,
      "message": "Hi Josh,\nIn Meta OpenBMC, we could set stepwise controller and PID controller in fan table for one sensor. The output PWM will be calculated by accumulating stepwise PWM and PID PWM.\nTherefore, we propose to accumulate the output PWM that the controllers have same profile name. E.g. The profile name of PID_Temp_CPU0 and Stepwise_Temp_CPU0 are Temp_CPU0.\n\nRef: https://github.com/facebook/openbmc/blob/helium/meta-facebook/meta-fby35/recipes-fby35/fscd/fscd/FSC_CLASS1_type1_zone1.fsc#L2",
      "parentUuid": "b3c480eb_b24e8218",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "668410b6_910adf15",
        "filename": "pid/zone.cpp",
        "patchSetId": 9
      },
      "lineNbr": 276,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "I\u0027m not sure what this is to accomplish. What is the purpose of this? Also, please provide documentation/examples for this new feature.",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4936519a_afb0ad18",
        "filename": "pid/zone.cpp",
        "patchSetId": 9
      },
      "lineNbr": 276,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-20T11:54:03Z",
      "side": 1,
      "message": "We would like to accumulate the output PWM of PID controller and stepwise controller so the maximum setpoint name would be the combination of the name of PID controller and the name of stepwise controller.",
      "parentUuid": "668410b6_910adf15",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32461c5f_4dd1d294",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "I am unsure of the purpose of adding the string field here. What additional purpose does this string serve?",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54cfc0ed_2a5e5465",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-20T11:54:03Z",
      "side": 1,
      "message": "We would like to accumulate the output PWM of PID controller and stepwise controller so we would accumulate the setpoint of the controllers that have same profile name.\nE.g. The profile name of PID_Temp_CPU0 and Stepwise_Temp_CPU0 are Temp_CPU0.",
      "parentUuid": "32461c5f_4dd1d294",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bee91d3b_49849dc4",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T23:29:25Z",
      "side": 1,
      "message": "Interesting. I don\u0027t quite understand what is meant by \"accumulate the setpoint\" in this context. How do the two PID loops interact?",
      "parentUuid": "54cfc0ed_2a5e5465",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381f295f_b6faa680",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-21T02:49:48Z",
      "side": 1,
      "message": "We can have multiple controllers for same sensors, as you can see in the reference fan table. It has two controllers, linear_cpu (which is stepwise) and pid_cpu, to monitor the temperature of CPU.\n\nWe will accumulate the output PWM(setpoint) of linear_cpu and pid_cpu as the output PWM for CPU temperature.\n\nThere is a setpoint 65 degree in pid_cpu that means the output PWM of pid_cpu will be 0 if the temperature was lower than 65 degree.\n\nOnce the temperature was over 65 degree, the linear_cpu will ouput 40 PWM and pid_cpu will also calculate the output PWM, let\u0027s say pid_cpu_output. The output PWM for CPU temperature will be 40 + pid_cpu_output.\n\nRef: https://github.com/facebook/openbmc/blob/helium/meta-facebook/meta-fby35/recipes-fby35/fscd/fscd/FSC_CLASS1_type1_config.json#L61",
      "parentUuid": "bee91d3b_49849dc4",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ca96c1e_146a912c",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-21T07:38:53Z",
      "side": 1,
      "message": "Interesting, so the PWM would be cumulative, and the sum total of the PWM from each loop would be added together and then sent to the fan motor? What happens if the sum total exceeds 100%, is it capped?\n\nSo the purpose of this is to unify a feature from the Facebook fork of OpenBMC with the mainline OpenBMC? This is a good idea.\n\nHowever, since it will affect existing behavior, I am really hoping to see it safely isolated behind a flag, so that this differing behavior will only be enabled if the user has explicitly configured it to be so.\n\nI also noticed the Facebook files have different field names. For example, \"kp\", \"ki\", \"kd\", instead of \"PCoefficient\", \"ICoefficient\", \"DCoefficient\".",
      "parentUuid": "381f295f_b6faa680",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02ac8569_509b607c",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-25T01:33:49Z",
      "side": 1,
      "message": "Hi Josh,\n\nThe output PWM can be limited by the output maximum clamp value in fan table so it won\u0027t exceed 100%.\n\nI added a compile flag to seperate two method to calculate PID output.",
      "parentUuid": "4ca96c1e_146a912c",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50ab5514_2a2b57eb",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-10-20T01:35:23Z",
      "side": 1,
      "message": "I would prefer this stay a vector. If you wish to ensure that no duplicates are present, how about checking for them at insertion time, and making sure that a duplicate does not already exist before inserting it?",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b7b81d2_14d8c75b",
        "filename": "pid/zone.hpp",
        "patchSetId": 9
      },
      "lineNbr": 120,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-25T01:33:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50ab5514_2a2b57eb",
      "revId": "8af4402ab71a1227e827a3f7d9fa8b416dad3e24",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}