{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6175ef53_7723ab00",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-29T15:47:28Z",
      "side": 1,
      "message": "I\u0027m not following this, wouldn\u0027t the next scan loop or sensor update immediately return the fan to the correct speed?  Sure, it doesn\u0027t happen \"immediately\" but it should happen within a single scan loop.  Is that worth the added complexitly?  Or am I missing something.",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bf21123_3fab02d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-30T05:43:42Z",
      "side": 1,
      "message": "There is logic to reduce the number of D-Bus write calls necessary, if the PID-loop-computed PWM is the same as before. It won\u0027t perform the PWM write. So, what happens is the fan will still remain at whatever speed the user left it at, even if it is vastly wrong compared to what the PID loop wants it to be at, until something happens that causes the PID loop to compute a different PWM value. If the PID loop is stable, that could take an arbitrarily long time to happen. This patch makes sure to invalidate that cache, forcing the PWM write to happen, when the user returns to auto mode from manual mode, so the expected PID-loop-computed PWM is restored.",
      "parentUuid": "6175ef53_7723ab00",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5a803cf_357cea5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-30T17:07:37Z",
      "side": 1,
      "message": "\u003e There is logic to reduce the number of D-Bus write calls necessary, if the PID-loop-computed PWM is the same as before. It won\u0027t perform the PWM write. So, what happens is the fan will still remain at whatever speed the user left it at, even if it is vastly wrong compared to what the PID loop wants it to be at, until something happens that causes the PID loop to compute a different PWM value.\n\nRight, but in 99% of cases, won\u0027t that be the next loop of the PID?  \n\n\u003e If the PID loop is stable, that could take an arbitrarily long time to happen.\n\nNot following this.  Even a stable pid loop will have an I value that is changing the output, unless all thermal margins are EXACTLY at the right temperature, in which case, it means the fans are running at the speed they should be.\n\n\u003e This patch makes sure to invalidate that cache, forcing the PWM write to happen, when the user returns to auto mode from manual mode, so the expected PID-loop-computed PWM is restored.",
      "parentUuid": "3bf21123_3fab02d3",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01fe2281_66be173e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2021-04-30T19:10:46Z",
      "side": 1,
      "message": "We\u0027ve seen this happen regularly in both manual and automated testing. The loop will likely eventually get a new value, but in practice that can take long enough to cause test failures",
      "parentUuid": "d5a803cf_357cea5b",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c9118bf_8e1e6a40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-03T23:20:09Z",
      "side": 1,
      "message": "Why is the test looking for values to change on very stable systems or in a very short timeframe?  That sounds like a broken test to me, not accounting for the first loop, or making assertions that are incorrect, (or equally as likely I\u0027m very much missing something.)",
      "parentUuid": "01fe2281_66be173e",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c1caaf1_81675f5c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2021-05-04T00:02:15Z",
      "side": 1,
      "message": "I think this happens specifically if the loop is at some minimum output on an idling system, then someone manually sets a high PWM before reverting it to auto control. The loop will just keep sitting at the minimum value meaning the target PWM won\u0027t change meaning the high PWM will persist indefinitely",
      "parentUuid": "2c9118bf_8e1e6a40",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21ce15b1_ebe819b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-04T00:13:02Z",
      "side": 1,
      "message": "But then wont the CPU get overcooled, and the I coefficient will kick in and start dropping the speed back down?",
      "parentUuid": "9c1caaf1_81675f5c",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7e6f0b4_16e37c2c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-04T00:23:40Z",
      "side": 1,
      "message": "Got it, if we\u0027re at minimum there\u0027s a possibility we can\u0027t go any lower.  Works for me.",
      "parentUuid": "21ce15b1_ebe819b0",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d436dc0a_e79c18e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-05-04T01:00:31Z",
      "side": 1,
      "message": "OK, here\u0027s a scenario:\n\nComputed PWM is 80%.\nIt\u0027s a stable system.\nUser sets PWM to manual mode.\nUser sets PWM of 20%, because they were in the room and it was too loud.\nUser leaves the room, and sets PWM back to auto mode.\nThe fan PWM is still at 20%, which is incorrect.\nAt this point, it should be set back to 80%, but it\u0027s not.\nComputed PWM remains at 80%.\nAs computed PWM is unchanged, no write command is issued.\nHowever, unbeknownst to the algorithm, the fan is at 20%.\nThe system starts to heat up.\nThings get too hot, and the PWM algorithm notices this.\nEventually, computed PWM becomes 81%.\nNow, this is different enough.\nThe fan is set to 81%.\nThe system cools back down.\n\nIf the fan PWM had simply been restored to 80% after the user returned it to auto mode from manual mode, the above could have been simplified, and the system would not needlessly heat up.\n\nA worse scenario would be if the computed PWM were already 100%. Now, there is no more headroom. The PWM is already as high as it can go, and won\u0027t change, unless the system cools down. If the user  sets manual mode, slows down the fan, and then sets auto mode again, the system is now doomed to overheat, because nothing will restore the PWM to 100%. Because it\u0027s unchanged from the earlier computed value of 100%, so no write command would ever happen.\n\nThis should make more sense now.",
      "parentUuid": "b7e6f0b4_16e37c2c",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9861b030_88d32b82",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-02-15T22:56:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d436dc0a_e79c18e3",
      "range": {
        "startLine": 14,
        "startChar": 17,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a79d9b21_5509aff1",
        "filename": "interfaces.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-29T15:47:28Z",
      "side": 1,
      "message": "OpenBMC naming standard please.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8f59031_4b686083",
        "filename": "interfaces.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-30T05:47:03Z",
      "side": 1,
      "message": "What would be the appropriate standard in this case? Elsewhere in this file is class WriteInterface, which has local _min and _max members. I was following that naming convention, using leading underscore with lowercase. Should WriteInterface local members be renamed as well?",
      "parentUuid": "a79d9b21_5509aff1",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d3356dc_5d158ce1",
        "filename": "interfaces.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-30T17:07:37Z",
      "side": 1,
      "message": "\u003e What would be the appropriate standard in this case?\n\nlowerCamelCase.  The docs repo has more details.\n\n\u003e Elsewhere in this file is class WriteInterface, which has local _min and _max members.\n\nThose are also incorrect.  At some point we should really get the clang-tidy checks going on this repo which can catch this kind of stuff at CI time.\n\n\u003e I was following that naming convention, using leading underscore with lowercase. Should WriteInterface local members be renamed as well?\n\nYes, but not part of this commit.",
      "parentUuid": "a8f59031_4b686083",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17df06c3_b732c49a",
        "filename": "interfaces.hpp",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-02-15T22:56:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d3356dc_5d158ce1",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a53bcd3_21804efa",
        "filename": "pid/zone_interface.hpp",
        "patchSetId": 12
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-04T00:23:40Z",
      "side": 1,
      "message": "These two methods are taking what was previously a pure virtual class, and gicing it a concrete implementation.  At a matter of design, I think it would be better for this to remain a virtual class.",
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23a40822_c50ca886",
        "filename": "pid/zone_interface.hpp",
        "patchSetId": 12
      },
      "lineNbr": 56,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-02-15T22:56:11Z",
      "side": 1,
      "message": "made this a pure virtual and put the no-op in the concrete class.",
      "parentUuid": "6a53bcd3_21804efa",
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f96276cc_f614a25f",
        "filename": "pid/zone_interface.hpp",
        "patchSetId": 12
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-04T00:23:40Z",
      "side": 1,
      "message": "same as above.",
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18b30087_3b98a425",
        "filename": "pid/zone_interface.hpp",
        "patchSetId": 12
      },
      "lineNbr": 99,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-02-15T22:56:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f96276cc_f614a25f",
      "revId": "64f3dbf199754f531c35ab09a9979eb20b38b4aa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}