{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "55bf84d9_abe43217",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-03-08T22:05:31Z",
      "side": 1,
      "message": "Looks reasonable. I like the idea of delaying PID startup indefinitely until all the sensors are ready. I don\u0027t think the old limit of 5 retries was there for any reason. It might simplify this code to get rid of the hardcoded number 5 completely.\n\nAlso, are all the calls to tryRestartControlLoops() accounted for? There is one also in dbusconfiguration.cpp file.",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbf06101_8bbf7909",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-03-08T22:46:17Z",
      "side": 1,
      "message": "\u003e It might simplify this code to get rid of the hardcoded number 5 completely.\n\nYou mean to just allow indefinite retries in any context that function is called from?\n\n\u003e Also, are all the calls to tryRestartControlLoops() accounted for?\n\nI set the default argument in `util.hpp` so that all other call-sites retained their existing behavior (5 retries), since the case I was concerned with was just the initial daemon start-up.  I didn\u0027t audit for other callers though; do you think the ones in dbusconfiguration.cpp\u0027s `eventHandler()` function and the `sighupHandler()` function should get the same behavioral change?  If so, then yeah I guess we might as well just get rid of the limit entirely...",
      "parentUuid": "55bf84d9_abe43217",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71d6cbcf_b724fe1c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-03-09T05:25:44Z",
      "side": 1,
      "message": "Yes. I can\u0027t think of a case where exiting out to systemd would be any better than trying again. The code in tryRestartControlLoops() is pretty messy, and it should be cleaned up, instead of being made more complicated in an effort to preserve old behavior that nobody really knows why it was done originally and seemed like a bad idea to me anyway.\n\nAs for the other calls (event handler and SIGHUP handler), yes, they too should try until they succeed. Reason is, if they fail, what happens then? Either the program exits, or it continues in some undefined state, either way is not optimal.\n\nHopefully the fans will be in failsafe mode during this retry period. If they are not, then that would be a bug in the way it was originally designed. In the absence of good sensor information, we need to be in failsafe.",
      "parentUuid": "fbf06101_8bbf7909",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e43ec607_08c825b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-03-14T08:13:19Z",
      "side": 1,
      "message": "Hmm. One behavior I noticed is that when a PID loop using nonexistent sensors is configured (perhaps accidentally), it becomes very difficult to send busctl commands to phosphor-pid-control, because it is in a restart loop internally. This would be a problem, if the behavior is changed to do this indefinitely. To test it, try using busctl commands to query the zone control objects (FailSafe and Manual), and see if it still works reliably when doing indefinite retries. We might need to refactor something internally, if it doesn\u0027t work.",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c33d36a_18bb4d58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-03-15T05:04:53Z",
      "side": 1,
      "message": "Would this patch change anything in that regard though?  Without this change I\u0027d expect it would spend most of its time in the same state, just punctuated by periodically disappearing from dbus (when it crashses) and reappearing (when systemd restarts it).\n\nI\u0027m not familiar with swampd\u0027s dbus interface(s) offhand, but:\n\nWith the patch, with sensors not yet instantiated (prior to host power-on) I see:\n\n```\nroot@spc621d8hm3:~# busctl list | grep swampd \n:1.12                                            190 swampd          root             :1.12         phosphor-pid-control.service                                           -       -\n:1.13                                            190 swampd          root             :1.13         phosphor-pid-control.service                                           -       -\n:1.14                                            190 swampd          root             :1.14         phosphor-pid-control.service                                           -       -\nxyz.openbmc_project.Hwmon.external               190 swampd          root             :1.13         phosphor-pid-control.service                                           -       -\nxyz.openbmc_project.State.FanCtrl                190 swampd          root             :1.12         phosphor-pid-control.service                                           -       -\nroot@spc621d8hm3:~# busctl tree :1.12\n`-/xyz\n  `-/xyz/openbmc_project\n    `-/xyz/openbmc_project/settings\n      `-/xyz/openbmc_project/settings/fanctrl\nroot@spc621d8hm3:~# busctl tree :1.13\nFailed to introspect object / of service :1.13: Unknown object \u0027/\u0027.\nNo objects discovered.\nroot@spc621d8hm3:~# busctl tree :1.14\nFailed to introspect object / of service :1.14: Unknown object \u0027/\u0027.\nNo objects discovered.\nroot@spc621d8hm3:~# busctl introspect :1.12 /xyz/openbmc_project/settings/fanctrl\nNAME                                TYPE      SIGNATURE  RESULT/VALUE  FLAGS\norg.freedesktop.DBus.Introspectable interface -          -             -\n.Introspect                         method    -          s             -\norg.freedesktop.DBus.ObjectManager  interface -          -             -\n.GetManagedObjects                  method    -          a{oa{sa{sv}}} -\n.InterfacesAdded                    signal    oa{sa{sv}} -             -\n.InterfacesRemoved                  signal    oas        -             -\norg.freedesktop.DBus.Peer           interface -          -             -\n.GetMachineId                       method    -          s             -\n.Ping                               method    -          -             -\norg.freedesktop.DBus.Properties     interface -          -             -\n.Get                                method    ss         v             -\n.GetAll                             method    s          a{sv}         -\n.Set                                method    ssv        -             -\n.PropertiesChanged                  signal    sa{sv}as   -             -\n```\n\nIn the same scenario without the patch I see the same thing.",
      "parentUuid": "e43ec607_08c825b3",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9367dd4c_42a7c2b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-03-20T10:39:02Z",
      "side": 1,
      "message": "The bug happens when using the thermal zones under State.FanCtrl service.\n\nHere\u0027s an example for \"zone0\" in this case:\n\nbusctl get-property xyz.openbmc_project.State.FanCtrl /xyz/openbmc_project/settings/fanctrl/zone0 xyz.openbmc_project.Control.Mode Manual\n\nThis command will work normally when swampd is stable. This command will fail to work, however, when swampd is still doing these retries.",
      "parentUuid": "9c33d36a_18bb4d58",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b20531a_8b7c5e46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-03-21T09:15:06Z",
      "side": 1,
      "message": "Got it, thanks for the extra info.\n\nI still don\u0027t see how it\u0027s an issue with this change though -- if the daemon just repeatedly crashes and restarts (as is the current behavior) it still won\u0027t be progressing past the initial retry-loop phase anyway, right?  So it seems like it remaining in that retry loop instead of blowing up and starting over with an entirely new process wouldn\u0027t break anything that wasn\u0027t already failing anyway...",
      "parentUuid": "9367dd4c_42a7c2b4",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4abdca7_5110e88b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-03-21T09:54:32Z",
      "side": 1,
      "message": "That makes sense. This bug should probably be tracked as a separate issue. Adding your change won\u0027t make the bug worse or better, because the behavior will still be the same (it will just retry indefinitely instead of exiting out and letting systemd restart it).",
      "parentUuid": "6b20531a_8b7c5e46",
      "revId": "ca701847bffd3a80ff59631e8675b697722292de",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}