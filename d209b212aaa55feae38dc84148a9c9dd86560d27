{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "44e7c9db_64d3929b",
        "filename": "pid/ec/logging.cpp",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-11-10T23:40:56Z",
      "side": 1,
      "message": "I believe you could maybe use https://en.cppreference.com/w/cpp/string/byte/isalnum ?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 53,
        "endChar": 1
      },
      "revId": "d209b212aaa55feae38dc84148a9c9dd86560d27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "def9540a_9fcd8a5f",
        "filename": "pid/ec/logging.cpp",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-11T00:09:04Z",
      "side": 1,
      "message": "I had considered that originally, but I wanted to make sure there were explicitly no dependencies on locale.",
      "parentUuid": "44e7c9db_64d3929b",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 53,
        "endChar": 1
      },
      "revId": "d209b212aaa55feae38dc84148a9c9dd86560d27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cae00a54_5640cf2b",
        "filename": "pid/ec/logging.cpp",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-11-11T00:14:15Z",
      "side": 1,
      "message": "We could just use https://en.cppreference.com/w/cpp/locale/isalnum and set the locale to compare to if we\u0027re worried about that:\n\n```\nstd::locale loc1(\"C\");\nstd::isalnum(c, loc1);\n```",
      "parentUuid": "def9540a_9fcd8a5f",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 53,
        "endChar": 1
      },
      "revId": "d209b212aaa55feae38dc84148a9c9dd86560d27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3560fa1d_be344b9c",
        "filename": "pid/ec/logging.cpp",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-11T00:34:33Z",
      "side": 1,
      "message": "Would that work even on small embedded C libraries that don\u0027t support locale? I am leery of introducing a locale requirement to the BMC.",
      "parentUuid": "cae00a54_5640cf2b",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 53,
        "endChar": 1
      },
      "revId": "d209b212aaa55feae38dc84148a9c9dd86560d27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a97374ad_a3fbbf86",
        "filename": "pid/ec/logging.hpp",
        "patchSetId": 15
      },
      "lineNbr": 84,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-11-10T23:40:56Z",
      "side": 1,
      "message": "question: could you std::move the whole struct first then just overwrite the move.moved?",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 84,
        "endChar": 0
      },
      "revId": "d209b212aaa55feae38dc84148a9c9dd86560d27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "704cce33_5498707e",
        "filename": "pid/ec/logging.hpp",
        "patchSetId": 15
      },
      "lineNbr": 84,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-11T00:09:04Z",
      "side": 1,
      "message": "I will try it. Nice, it worked!",
      "parentUuid": "a97374ad_a3fbbf86",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 84,
        "endChar": 0
      },
      "revId": "d209b212aaa55feae38dc84148a9c9dd86560d27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}