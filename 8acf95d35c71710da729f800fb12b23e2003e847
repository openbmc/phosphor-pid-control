{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e28d7a4b_5c5d6b88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "This seems like a good idea, but I have some implementation questions. Also, what exactly is different between the \"Google\" and the \"standard\" PID loop algorithm?\n\nI have some algorithmic changes I also want to make, however, I don\u0027t want to break existing PID loop tunings by changing any default computational behavior. I want to make this a selectable feature, though, perhaps with a flag. I like your idea of having a different name for it, however.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa2b1978_a1d7ab49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "I had written up a quick summary on Github, which I\u0027ll paste below.  In a nutshell, the Google algorithm is a pseudo-PI[D] controller chained with another PI controller, which from a control theory perspective isn\u0027t something we want to ship (potential for instability).  The algorithm Raptor added is standard PID, without the unwanted chained PI controller tacked on.\n\nThank you for not breaking our tuning. :)  The algorithm here (standard PID) is already used on Kestrel (Zephyr RTOS), and we already have the tuned coefficients for our platforms as a result.\n\n\"The existing Google EC algorithm is not workable for the Raptor and SIE (patches coming in the future) platforms, as it is not a standard PID controller. Raptor uses standard PID controllers in its firmware, for example in its Kestrel BMC products, as after extensive testing we have found that our fan control hardware is best controlled (i.e. minimum overshoot and hunting) via a standard PID algorithm.\n\nIn this patch, the algorithm type used defaults to the Google algorithm, but can be changed in the JSON configuration file.\n\nThis is the first set of patches in a series that aims to add full support for the Raptor Computing Systems POWER9 platforms to OpenBMC.\"",
      "parentUuid": "e28d7a4b_5c5d6b88",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a625a0bd_e12a3fc1",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 10
      },
      "lineNbr": 359,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "There is a reason the thermal PID loops run at 1.0 seconds and the fan PID loops run at 0.1 seconds by default. This should not be changed without a good reason.\n\nThe thermal loops often have to process many more sensors than the fan loops do, putting more load on the system. Also, thermal sensors tend to change slower than fan sensors. So, it is intentional for the main loop to only process the thermal PID only 1 out of each 10 iterations, while processing the fan PID every iteration.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da2b4076_089297b9",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 10
      },
      "lineNbr": 359,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "In testing, this speed was insufficient to get proper control of the fans on two of our platforms, with oscillation / hunting behavior observed.  If I were to make this a tunable would that be acceptable?",
      "parentUuid": "a625a0bd_e12a3fc1",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1df22db1_ae628a48",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 10
      },
      "lineNbr": 359,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-09T05:17:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da2b4076_089297b9",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dc6b7b8_406e2d0e",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 107,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "Is there a difference between \"fan\" and \"simplefan\", other than selection of the PID loop algorithm? If not, it might make for a cleaner design to just add another field, perhaps \"Algorithm\", that can be set to values like \"google\" or \"standard\".",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f846ae_83c2d3e8",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 107,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "Yes, the default \"fan\" controller adds a second unwanted PI controller into the control loop.",
      "parentUuid": "6dc6b7b8_406e2d0e",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e27c9e_0ff7d410",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 107,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-09T07:24:05Z",
      "side": 1,
      "message": "Ah, so the PID loop algorithm does not change? In this case, instead of calling it \"simplefan\", perhaps call it \"single\" to represent the fact that it is just a single PID loop doing the work of both a thermal and a fan PID loop.",
      "parentUuid": "d6f846ae_83c2d3e8",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bfb3b9f_9ae79482",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 118,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "This code looks copied, but differs. Among other things, addPidFailSafePercent() is not done. Is this intentional?",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53cbe8b1_4e0102a6",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 118,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "Could be an inadvertent difference due to the age of the original patches.  I\u0027ll take a closer look.",
      "parentUuid": "3bfb3b9f_9ae79482",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68605858_3773de98",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 118,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-09T05:17:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53cbe8b1_4e0102a6",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baf441d1_1607c8c5",
        "filename": "pid/buildjson.cpp",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "Instead of doing an indentation of everything that follows, it might be simpler here to test for the opposite condition, and if true, take an early return here. That will avoid having to change the entire rest of the function.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1436bbd_62046c38",
        "filename": "pid/buildjson.cpp",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "If that\u0027s acceptable from a style perspective, I\u0027m happy to do so.",
      "parentUuid": "baf441d1_1607c8c5",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f04f6c9e_b3ef2e1f",
        "filename": "pid/buildjson.cpp",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-09T05:17:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1436bbd_62046c38",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9f65336_a3b55d66",
        "filename": "pid/ec/pid_common.hpp",
        "patchSetId": 10
      },
      "lineNbr": 14,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "PID as a constant is too generic, as it is already a PIDControlType. To be common with your other code, I suggest SIMPLE or STANDARD.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3973dcb2_8cf04b8a",
        "filename": "pid/ec/pid_common.hpp",
        "patchSetId": 10
      },
      "lineNbr": 14,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "Will fix.",
      "parentUuid": "e9f65336_a3b55d66",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfffcd11_e89fb821",
        "filename": "pid/ec/pid_common.hpp",
        "patchSetId": 10
      },
      "lineNbr": 14,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-09T05:17:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3973dcb2_8cf04b8a",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad1e5bde_9860e18d",
        "filename": "pid/ec/pid_standard.cpp",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "I am curious. What about this function is different from the way the PID algorithm used to be computed previously?\n\nAlso, it looks like a lot of cut-and-paste code. I would prefer only the different parts be changed, instead of copying the entire file.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "622f6595_b5e99b93",
        "filename": "pid/ec/pid_standard.cpp",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "The existing controller is not a true PID, if you trace the mathematics of it it\u0027s some kind of combination stepwise and PI controller.  This was a significant source of heartburn during development, as it simply wouldn\u0027t tune on our hardware platforms.\n\nI\u0027d prefer a separate file simply to keep the mathematics clean vs. a bunch of if statements.  Is that OK?",
      "parentUuid": "ad1e5bde_9860e18d",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fab9fae_61ad0bf2",
        "filename": "pid/ec/pid_standard.cpp",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-06-09T06:21:48Z",
      "side": 1,
      "message": "Hmm...what do you mean \"it\u0027s some kind of combination stepwise and PI controller\"? AFAIK, if there doesn\u0027t have any stepwise setting in json, it\u0027s just like a PID controller.",
      "parentUuid": "622f6595_b5e99b93",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "167b9898_643d97e9",
        "filename": "pid/ec/pid_standard.cpp",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-09T07:24:05Z",
      "side": 1,
      "message": "What exactly is changed here, between the original pid.cpp file, and this copy of it? The code looks about 99% the same to me, except for some differences in line spacing.\n\nI would rather it remain the same file, unless the PID algorithm is being completely rewritten, which does not look to be the case here. If only a few lines are being changed, use an if/else block to isolate the differences. Please do not cut-and-paste the entire file.\n\nAlso, the pid.cpp and stepwise.cpp are two different algorithms. They are already cleanly isolated. The PID controller and stepwise controller are separate subclasses. See the controller.hpp file for the common ancestor. A properly configured system should not have any \"combination stepwise and PI controller\". I am not sure where this misunderstanding came from.",
      "parentUuid": "9fab9fae_61ad0bf2",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b5f602a_cfbf6560",
        "filename": "pid/simplefancontroller.cpp",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "How does a simple fan controller differ from the default fan controller? It looks to be much the same code. I would prefer to avoid massive cut-and-paste code duplication here. Perhaps we can only override what actually changes, instead of having to cut-and-paste the entire class.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fc06ca3_70011222",
        "filename": "pid/simplefancontroller.cpp",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "The simple fan controller doesn\u0027t add the unwanted second PI controller in the control loop.  Interestingly, this should also fix issue #32 over on Github.",
      "parentUuid": "8b5f602a_cfbf6560",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ce2d90b_8190fc23",
        "filename": "pid/simplefancontroller.cpp",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-09T07:24:05Z",
      "side": 1,
      "message": "OK. See my other comment in simplefancontroller.hpp for my reasoning about that. I think it\u0027s good to fix issue #32, but I honestly don\u0027t think this technique is the best way to fix it.",
      "parentUuid": "9fc06ca3_70011222",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f92d063_4c2e1048",
        "filename": "pid/simplefancontroller.hpp",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "Does it output RPM values, or does it output PWM values? Usually, the thermal PID loop outputs the desired RPM values, then the fan PID loop converts RPM to PWM and outputs the actual PWM values to the hardware.\n\nSome systems have a smart fan controller, in which RPM drives the fans, not PWM. In this case, the thermal PID loop outputs RPM, and no further processing is necessary, as the fan hardware can receive the desired RPM directly. PWM is not used at all.\n\nAlso, in another case, the RPM is not cared about at all by the user, and the thermal PID loop is tuned to output the desired PWM percentage. RPM is not used at all.\n\nIn both of these cases, usually a dummy PID loop that\u0027s 1:1 is used, to just copy the setpoint to the output, and ignore the input.\n\nhttps://github.com/openbmc/phosphor-pid-control/issues/32",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b46762b8_a1a07629",
        "filename": "pid/simplefancontroller.hpp",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "The last case is what we\u0027re looking for.  I don\u0027t see why we need the added complexity and computational overhead of the dummy PI loop?",
      "parentUuid": "9f92d063_4c2e1048",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a36eee4_0abb9c47",
        "filename": "pid/simplefancontroller.hpp",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-06-09T06:21:48Z",
      "side": 1,
      "message": "One thing I\u0027m interested. The first thermal controller output actually can be RPM or PWM according parameter setting, and we can setting second loop parameters that only have FFGain to output to fan directly. Why need add a new controller to remove second PID loop? Does it make a large delay in your system?",
      "parentUuid": "b46762b8_a1a07629",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1720ef00_4cedb3d6",
        "filename": "pid/simplefancontroller.hpp",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-09T07:24:05Z",
      "side": 1,
      "message": "Agree with Harvey here. It would be good to refactor to make only a single PID loop necessary. The code right now assumes a pipeline of a thermal PID loop feeding into a fan PID loop, hence the need for two PID loops. This should be refactored, so that a single PID loop is all that is necessary. I agree with that. However, I do not think that adding an additional duplicate PID controller class is the best way to do it. It adds a lot of duplicated cut-and-paste code. The refactoring should take place at the glue where the thermal PID controller and fan PID controller come together, instead of by creating a third PID controller.",
      "parentUuid": "0a36eee4_0abb9c47",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27b0d508_8bafdf31",
        "filename": "pid/util.cpp",
        "patchSetId": 10
      },
      "lineNbr": 60,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "Hmm. It seems last_error got duplicated here? Lines 58 and 60",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47346264_397e6cd1",
        "filename": "pid/util.cpp",
        "patchSetId": 10
      },
      "lineNbr": 60,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "Merge issue during rebase.  I\u0027ll fix this up.",
      "parentUuid": "27b0d508_8bafdf31",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9777bd5_bb6e7e94",
        "filename": "pid/util.cpp",
        "patchSetId": 10
      },
      "lineNbr": 60,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-09T05:17:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47346264_397e6cd1",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d68ee3c0_addb5d86",
        "filename": "test/meson.build",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "This reminds me. What\u0027s the difference between a \"Google\" PID loop, and a \"standard\" PID loop? Do they provide different output results? If so, then we need to have a test case for each of these.\n\nThe test case must be able to catch the condition in which the user erroneously specifies a Google loop instead of a standard loop, and also vice versa.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6d20bb_eb930c4f",
        "filename": "test/meson.build",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-08T21:13:15Z",
      "side": 1,
      "message": "Difference was explained above, I\u0027ll need to look into the test cases for it.",
      "parentUuid": "d68ee3c0_addb5d86",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd1230bb_08ab5c31",
        "filename": "test/meson.build",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2023-06-09T05:17:20Z",
      "side": 1,
      "message": "The existing test cases are unaffected by this.  In fact I don\u0027t really see anything (on quick glance) that\u0027s checking PID output, so I think we\u0027re OK with the existing test cases?",
      "parentUuid": "1d6d20bb_eb930c4f",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74fbdfa2_d90a1ab3",
        "filename": "test/meson.build",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-09T07:24:05Z",
      "side": 1,
      "message": "The PID loop input and output are both tested. Take a look at \"outputProc\" in the test directory, you will see it used in several places. It\u0027s true that outputProc is often the final statement of the test case, so it may look like the output is discarded at first glance, but the result is actually tested retroactively by the EXPECT_CALL statement just above it.",
      "parentUuid": "dd1230bb_08ab5c31",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "509dbbaf_d5d08739",
        "filename": "util.cpp",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-08T20:55:18Z",
      "side": 1,
      "message": "Wow, good catch, this was forgotten about.",
      "revId": "8acf95d35c71710da729f800fb12b23e2003e847",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}