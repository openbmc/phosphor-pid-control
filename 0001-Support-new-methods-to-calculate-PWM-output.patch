From 5fc2df25f80e9b9c5d9c51ab28035c86b9f0bc51 Mon Sep 17 00:00:00 2001
From: Bonnie Lo <Bonnie_Lo@wiwynn.com>
Date: Wed, 19 Oct 2022 11:15:34 +0800
Subject: [PATCH] Support new methods to calculate PWM output

Description:
1. Add one property in fan table that could be used to enable
   accumulation of output PWM of different controllers with same sensor.

2. Adding compile flag in bbappend to select another method to
   calculate PID output.

Design:
1. Search "accumulateSetPoint" field in fan table.
   If the value was true, accumulate the output PWM of
   different controllers with same profile name.

2. Support two method to calculate PID output that could be chosen by
   adding the following compile flag in bbappend.

EXTRA_OECONF:append = " --enable-check-hysteresis-using-setpoint=yes"

Test Case:
1. Check the output PWM of different controllers with same profile
   name could be accumulated - pass.

2. Add compile flag and check PID output would not be calculated if
   the input temperature was lower than setpoint - pass.

Please see more details in gist:
https://gist.github.com/DelphineCCChiu/a6170d3e1a12fc4ee76fad324382fba3

Change-Id: I9f38f250d72545784c6c11be2fde7d45f0b385c4
Signed-off-by: Delphine CC Chiu <Delphine_CC_Chiu@wiwynn.com>
---
 conf.hpp                   |  4 +++
 configure.md               |  6 ++++
 dbus/dbusconfiguration.cpp |  8 +++++
 meson.build                |  1 +
 meson.options              |  1 +
 pid/builder.cpp            |  3 +-
 pid/buildjson.cpp          |  8 +++++
 pid/pidcontroller.cpp      | 70 ++++++++++++++++++++++++++++++++------
 pid/pidcontroller.hpp      |  3 ++
 pid/zone.cpp               | 62 ++++++++++++++++++++++++++++++---
 pid/zone.hpp               |  8 +++--
 pid/zone_interface.hpp     |  5 +++
 test/pid_zone_unittest.cpp | 10 +++---
 test/zone_mock.hpp         |  1 +
 14 files changed, 167 insertions(+), 23 deletions(-)

diff --git a/conf.hpp b/conf.hpp
index 265da09..8a9ea38 100644
--- a/conf.hpp
+++ b/conf.hpp
@@ -84,6 +84,10 @@ struct ZoneConfig
 
     /* Customize time settings for every cycle */
     CycleTime cycleTime;
+
+    /* Enable accumulation of the output PWM of different controllers with same
+     * sensor */
+    bool accumulateSetPoint;
 };
 
 using PIDConf = std::map<std::string, ControllerInfo>;
diff --git a/configure.md b/configure.md
index 164e2e3..1f6c030 100644
--- a/configure.md
+++ b/configure.md
@@ -23,6 +23,12 @@ failsafe mode, even when the calculated PWM is higher than failsafe PWM. Without
 this enabled, the PWM is calculated and set to the calculated PWM **or** the
 failsafe PWM, whichever is higher.
 
+### --check-hysteresis-using-setpoint
+
+This build flag is used to check hysteresis using setpoint when calculating PWM
+in PID controller. Without this enabled, will check hysteresis using last input
+temperature.
+
 ## JSON Configuration
 
 Default config file path `/usr/share/swampd/config.json` can be overridden by
diff --git a/dbus/dbusconfiguration.cpp b/dbus/dbusconfiguration.cpp
index 7b78280..c7d28c5 100644
--- a/dbus/dbusconfiguration.cpp
+++ b/dbus/dbusconfiguration.cpp
@@ -649,6 +649,14 @@ bool init(sdbusplus::bus_t& bus, boost::asio::steady_timer& timer,
                                 details.cycleTime.cycleIntervalTimeMS);
             getCycleTimeSetting(zone, index, "UpdateThermalsTimeMS",
                                 details.cycleTime.updateThermalsTimeMS);
+
+            bool accumulateSetPoint = false;
+            auto findAccSetPoint = zone.find("AccumulateSetPoint");
+            if (findAccSetPoint != zone.end())
+            {
+                accumulateSetPoint = std::get<bool>(findAccSetPoint->second);
+            }
+            details.accumulateSetPoint = accumulateSetPoint;
         }
         auto findBase = configuration.second.find(pidConfigurationInterface);
         // loop through all the PID configurations and fill out a sensor config
diff --git a/meson.build b/meson.build
index 943cd37..09749ef 100644
--- a/meson.build
+++ b/meson.build
@@ -17,6 +17,7 @@ bindir = get_option('prefix') / get_option('bindir')
 conf_data.set('BINDIR', bindir)
 conf_data.set('SYSTEMD_TARGET', get_option('systemd_target'))
 conf_data.set('STRICT_FAILSAFE_PWM', get_option('strict-failsafe-pwm'))
+conf_data.set('CHECK_HYSTERESIS_USING_SETPOINT', get_option('check-hysteresis-using-setpoint'))
 
 configure_file(output: 'config.h',
     configuration: conf_data
diff --git a/meson.options b/meson.options
index 9205b1b..90ec2d8 100644
--- a/meson.options
+++ b/meson.options
@@ -1,4 +1,5 @@
 option('tests', type: 'feature', value: 'enabled', description: 'Build tests')
 option('oe-sdk', type: 'feature', value: 'disabled', description: 'Enable OE SDK')
 option('strict-failsafe-pwm', type: 'boolean', value: false, description: 'Set the fans strictly at the failsafe PWM when in failsafe mode')
+option('check-hysteresis-using-setpoint', type: 'boolean', value: false, description: 'Set to check hysteresis using setpoint when calculating PWM')
 option('systemd_target', type: 'string', value: 'multi-user.target', description: 'Target for starting this service')
diff --git a/pid/builder.cpp b/pid/builder.cpp
index 39d0076..d133662 100644
--- a/pid/builder.cpp
+++ b/pid/builder.cpp
@@ -76,7 +76,8 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
         auto zone = std::make_shared<DbusPidZone>(
             zoneId, zoneConf->second.minThermalOutput,
             zoneConf->second.failsafePercent, zoneConf->second.cycleTime, mgr,
-            modeControlBus, getControlPath(zoneId).c_str(), deferSignals);
+            modeControlBus, getControlPath(zoneId).c_str(), deferSignals,
+            zoneConf->second.accumulateSetPoint);
 
         std::cerr << "Zone Id: " << zone->getZoneID() << "\n";
 
diff --git a/pid/buildjson.cpp b/pid/buildjson.cpp
index dd7d2a3..e5faa69 100644
--- a/pid/buildjson.cpp
+++ b/pid/buildjson.cpp
@@ -213,6 +213,14 @@ std::pair<std::map<int64_t, conf::PIDConf>, std::map<int64_t, conf::ZoneConfig>>
         getCycleTimeSetting(zone, id, "updateThermalsTimeMS",
                             thisZoneConfig.cycleTime.updateThermalsTimeMS);
 
+        bool accumulateSetPoint = false;
+        auto findAccSetPoint = zone.find("accumulateSetPoint");
+        if (findAccSetPoint != zone.end())
+        {
+            findAccSetPoint->get_to(accumulateSetPoint);
+        }
+        thisZoneConfig.accumulateSetPoint = accumulateSetPoint;
+
         auto pids = zone["pids"];
         for (const auto& pid : pids)
         {
diff --git a/pid/pidcontroller.cpp b/pid/pidcontroller.cpp
index fa8d6f6..2fc242f 100644
--- a/pid/pidcontroller.cpp
+++ b/pid/pidcontroller.cpp
@@ -30,21 +30,39 @@
 namespace pid_control
 {
 
-void PIDController::process(void)
+double PIDController::calPIDOutput(const double setpt, const double input,
+                                   ec::pid_info_t* info)
 {
-    double input;
-    double setpt;
     double output;
+    auto name = getID();
 
-    // Get setpt value
-    setpt = setptProc();
-
-    // Get input value
-    input = inputProc();
+#ifdef CHECK_HYSTERESIS_USING_SETPOINT
+    // over the hysteresis bounds, keep counting pid
+    if (input > (setpt + info->positiveHysteresis))
+    {
+        // Calculate new output
+        output = ec::pid(info, input, setpt, &name);
 
-    auto info = getPIDInfo();
-    auto name = getID();
+        // this variable isn't actually used in this context, but we're setting
+        // it here incase somebody uses it later it's the correct value
+        lastInput = input;
+    }
+    // under the hysteresis bounds, initialize pid
+    else if (input < (setpt - info->negativeHysteresis))
+    {
+        lastInput = setpt;
+        info->integral = 0;
+        output = 0;
+    }
+    // inside the hysteresis bounds, keep last output
+    else
+    {
+        lastInput = input;
+        output = info->lastOutput;
+    }
 
+    info->lastOutput = output;
+#else
     // if no hysteresis, maintain previous behavior
     if (info->positiveHysteresis == 0 && info->negativeHysteresis == 0)
     {
@@ -58,7 +76,7 @@ void PIDController::process(void)
     else
     {
         // initialize if not set yet
-        if (std::isnan(lastInput))
+        if (!(std::isfinite(lastInput)))
         {
             lastInput = input;
         }
@@ -76,6 +94,36 @@ void PIDController::process(void)
 
         output = ec::pid(info, lastInput, setpt, &name);
     }
+#endif
+
+    return output;
+}
+
+void PIDController::process(void)
+{
+    double input;
+    double setpt;
+    double output;
+
+    // Get setpt value
+    setpt = setptProc();
+
+    // Get input value
+    input = inputProc();
+
+    auto info = getPIDInfo();
+
+    // No valid input just skip it.
+    if ((input == std::numeric_limits<double>::lowest()) ||
+        (input == std::numeric_limits<double>::max()))
+    {
+        return;
+    }
+
+    // Calculate output value
+    output = calPIDOutput(setpt, input, info);
+
+    info->lastOutput = output;
 
     // Output new value
     outputProc(output);
diff --git a/pid/pidcontroller.hpp b/pid/pidcontroller.hpp
index 05cbd71..1209dd7 100644
--- a/pid/pidcontroller.hpp
+++ b/pid/pidcontroller.hpp
@@ -73,6 +73,9 @@ class PIDController : public Controller
         return lastInput;
     }
 
+    double calPIDOutput(const double setpt, const double input,
+                        ec::pid_info_t* info);
+
   protected:
     ZoneInterface* _owner;
     std::string _id;
diff --git a/pid/zone.cpp b/pid/zone.cpp
index e5eddca..ea6c1d0 100644
--- a/pid/zone.cpp
+++ b/pid/zone.cpp
@@ -120,15 +120,26 @@ void DbusPidZone::addSetPoint(double setPoint, const std::string& name)
         return;
     }
 
-    _SetPoints.push_back(setPoint);
+    auto profileName = name;
+    if (getAccSetPoint())
+    {
+        /*
+         * If the name of controller is Linear_Temp_CPU0.
+         * The profile name will be Temp_CPU0.
+         */
+        profileName = name.substr(name.find("_") + 1);
+    }
+
+    _SetPoints[profileName] += setPoint;
+
     /*
      * if there are multiple thermal controllers with the same
      * value, pick the first one in the iterator
      */
-    if (_maximumSetPoint < setPoint)
+    if (_maximumSetPoint < _SetPoints[profileName])
     {
-        _maximumSetPoint = setPoint;
-        _maximumSetPointName = name;
+        _maximumSetPoint = _SetPoints[profileName];
+        _maximumSetPointName = profileName;
     }
 }
 
@@ -208,7 +219,16 @@ void DbusPidZone::addFanInput(const std::string& fan, bool missingAcceptable)
 void DbusPidZone::addThermalInput(const std::string& therm,
                                   bool missingAcceptable)
 {
-    _thermalInputs.push_back(therm);
+    /*
+     * One sensor may have stepwise and PID at the same time.
+     * Searching the sensor name before inserting it to avoid duplicated sensor
+     * names.
+     */
+    if (std::find(_thermalInputs.begin(), _thermalInputs.end(), therm) ==
+        _thermalInputs.end())
+    {
+        _thermalInputs.push_back(therm);
+    }
 
     if (missingAcceptable)
     {
@@ -286,6 +306,33 @@ void DbusPidZone::determineMaxSetPointRequest(void)
         }
     }
 
+    /*
+     * Combine the maximum SetPoint Name if the controllers have same profile
+     * name. e.g., PID_BB_INLET_TEMP_C + Stepwise_BB_INLET_TEMP_C.
+     */
+    if (getAccSetPoint())
+    {
+        auto profileName = _maximumSetPointName;
+        _maximumSetPointName = "";
+
+        for (auto& p : _thermals)
+        {
+            auto controllerID = p->getID();
+            auto found = controllerID.find(profileName);
+            if (found != std::string::npos)
+            {
+                if (_maximumSetPointName.empty())
+                {
+                    _maximumSetPointName = controllerID;
+                }
+                else
+                {
+                    _maximumSetPointName += " + " + controllerID;
+                }
+            }
+        }
+    }
+
     /*
      * If the maximum RPM setpoint output is below the minimum RPM
      * setpoint, set it to the minimum.
@@ -579,4 +626,9 @@ void DbusPidZone::updateThermalPowerDebugInterface(std::string pidName,
     }
 }
 
+bool DbusPidZone::getAccSetPoint(void) const
+{
+    return _accumulateSetPoint;
+}
+
 } // namespace pid_control
diff --git a/pid/zone.hpp b/pid/zone.hpp
index 464e672..52180a5 100644
--- a/pid/zone.hpp
+++ b/pid/zone.hpp
@@ -49,11 +49,13 @@ class DbusPidZone : public ZoneInterface, public ModeObject
   public:
     DbusPidZone(int64_t zone, double minThermalOutput, double failSafePercent,
                 conf::CycleTime cycleTime, const SensorManager& mgr,
-                sdbusplus::bus_t& bus, const char* objPath, bool defer) :
+                sdbusplus::bus_t& bus, const char* objPath, bool defer,
+                bool accumulateSetPoint) :
         ModeObject(bus, objPath,
                    defer ? ModeObject::action::defer_emit
                          : ModeObject::action::emit_object_added),
         _zoneId(zone), _maximumSetPoint(),
+        _accumulateSetPoint(accumulateSetPoint),
         _minThermalOutputSetPt(minThermalOutput),
         _zoneFailSafePercent(failSafePercent), _cycleTime(cycleTime), _mgr(mgr)
     {
@@ -72,6 +74,7 @@ class DbusPidZone : public ZoneInterface, public ModeObject
     void setManualMode(bool mode);
     bool getFailSafeMode(void) const override;
     void markSensorMissing(const std::string& name);
+    bool getAccSetPoint(void) const override;
 
     int64_t getZoneID(void) const override;
     void addSetPoint(double setPoint, const std::string& name) override;
@@ -209,6 +212,7 @@ class DbusPidZone : public ZoneInterface, public ModeObject
     std::string _maximumSetPointNamePrev;
     bool _manualMode = false;
     bool _redundantWrite = false;
+    bool _accumulateSetPoint = false;
     const double _minThermalOutputSetPt;
     // Current fail safe Percent.
     double _failSafePercent;
@@ -219,7 +223,7 @@ class DbusPidZone : public ZoneInterface, public ModeObject
     std::set<std::string> _failSafeSensors;
     std::set<std::string> _missingAcceptable;
 
-    std::vector<double> _SetPoints;
+    std::map<std::string, double> _SetPoints;
     std::vector<double> _RPMCeilings;
     std::vector<std::string> _fanInputs;
     std::vector<std::string> _thermalInputs;
diff --git a/pid/zone_interface.hpp b/pid/zone_interface.hpp
index 7797740..31f3256 100644
--- a/pid/zone_interface.hpp
+++ b/pid/zone_interface.hpp
@@ -104,6 +104,11 @@ class ZoneInterface
      */
     virtual bool getRedundantWrite(void) const = 0;
 
+    /** Returns true if user wants to accumulate the output PWM of different
+     * controllers with same sensor
+     */
+    virtual bool getAccSetPoint(void) const = 0;
+
     /** For each fan pid, do processing. */
     virtual void processFans(void) = 0;
     /** For each thermal pid, do processing. */
diff --git a/test/pid_zone_unittest.cpp b/test/pid_zone_unittest.cpp
index 6c570cc..1f6e672 100644
--- a/test/pid_zone_unittest.cpp
+++ b/test/pid_zone_unittest.cpp
@@ -53,6 +53,7 @@ TEST(PidZoneConstructorTest, BoringConstructorTest)
     SensorManager m(bus_mock_passive, bus_mock_host);
 
     bool defer = true;
+    bool accSetPoint = false;
     const char* objPath = "/path/";
     int64_t zone = 1;
     double minThermalOutput = 1000.0;
@@ -83,7 +84,7 @@ TEST(PidZoneConstructorTest, BoringConstructorTest)
         .WillOnce(Return(0));
 
     DbusPidZone p(zone, minThermalOutput, failSafePercent, cycleTime, m,
-                  bus_mock_mode, objPath, defer);
+                  bus_mock_mode, objPath, defer, accSetPoint);
     // Success.
 }
 
@@ -126,9 +127,9 @@ class PidZoneTest : public ::testing::Test
             .Times(::testing::AnyNumber())
             .WillOnce(Return(0));
 
-        zone = std::make_unique<DbusPidZone>(zoneId, minThermalOutput,
-                                             failSafePercent, cycleTime, mgr,
-                                             bus_mock_mode, objPath, defer);
+        zone = std::make_unique<DbusPidZone>(
+            zoneId, minThermalOutput, failSafePercent, cycleTime, mgr,
+            bus_mock_mode, objPath, defer, accSetPoint);
     }
 
     // unused
@@ -146,6 +147,7 @@ class PidZoneTest : public ::testing::Test
     double failSafePercent = 0;
     double setpoint = 50.0;
     bool defer = true;
+    bool accSetPoint = false;
     const char* objPath = "/path/";
     SensorManager mgr;
     conf::CycleTime cycleTime;
diff --git a/test/zone_mock.hpp b/test/zone_mock.hpp
index a3d6be9..4e34890 100644
--- a/test/zone_mock.hpp
+++ b/test/zone_mock.hpp
@@ -46,6 +46,7 @@ class ZoneMock : public ZoneInterface
 
     MOCK_CONST_METHOD0(getCycleIntervalTime, uint64_t());
     MOCK_CONST_METHOD0(getUpdateThermalsCycle, uint64_t());
+    MOCK_CONST_METHOD0(getAccSetPoint, bool());
 
     MOCK_METHOD1(getSensor, Sensor*(const std::string&));
 
-- 
2.25.1

