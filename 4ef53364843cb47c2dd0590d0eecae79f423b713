{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c58514c8_7e873e7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-10T23:13:31Z",
      "side": 1,
      "message": "It turns out the ZoneMock class still used the compatibility interface, to my surprise. I added the missing mock declaration. Now it all works as it should.\n",
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed1e30a2_5ba3c5a5",
        "filename": "dbus/dbuspassive.hpp",
        "patchSetId": 17
      },
      "lineNbr": 80,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-11T00:40:44Z",
      "side": 1,
      "message": "This naming is weird though, we should consider using clang to change all of these variables automatically",
      "range": {
        "startLine": 80,
        "startChar": 11,
        "endLine": 80,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de98dc0a_933e19b7",
        "filename": "dbus/dbuspassive.hpp",
        "patchSetId": 17
      },
      "lineNbr": 80,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-11-11T00:42:30Z",
      "side": 1,
      "message": "Ah yeah, it was probably following the google standard long ago when venture@ was writing this.",
      "parentUuid": "ed1e30a2_5ba3c5a5",
      "range": {
        "startLine": 80,
        "startChar": 11,
        "endLine": 80,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9f94ece_1a79f478",
        "filename": "dbus/dbuspassive.hpp",
        "patchSetId": 17
      },
      "lineNbr": 80,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-11T00:47:42Z",
      "side": 1,
      "message": "Hmm. What should it be changed to? It would have a blast radius. The existing names make sense, in the greater context of the program, as they match the existing usages in the ValueCacheEntry and ReadReturn structures.",
      "parentUuid": "ed1e30a2_5ba3c5a5",
      "range": {
        "startLine": 80,
        "startChar": 11,
        "endLine": 80,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0141a8cc_5a6f18e6",
        "filename": "dbus/dbuspassive.hpp",
        "patchSetId": 17
      },
      "lineNbr": 80,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-11T01:13:07Z",
      "side": 1,
      "message": "I meant this naming style doesn\u0027t follow OpenBMC C++ convention.",
      "parentUuid": "b9f94ece_1a79f478",
      "range": {
        "startLine": 80,
        "startChar": 11,
        "endLine": 80,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b33066c_d9e46525",
        "filename": "interfaces.hpp",
        "patchSetId": 17
      },
      "lineNbr": 24,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-11-11T00:30:26Z",
      "side": 1,
      "message": "Going back to this now that it seems scaled \u003d PWM and unscaled \u003d RPM - should we just use those names instead?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6723cc6_cbc8266a",
        "filename": "interfaces.hpp",
        "patchSetId": 17
      },
      "lineNbr": 24,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-11T00:32:42Z",
      "side": 1,
      "message": "No, that\u0027s a confusion of scaled/unscaled versus input/output. Scaled is normalized to the (0.0, 1.0) range, based on preconfigured min and max, but unscaled is whatever raw value comes from the inputs.",
      "parentUuid": "6b33066c_d9e46525",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cac3a745_1498017a",
        "filename": "interfaces.hpp",
        "patchSetId": 17
      },
      "lineNbr": 24,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-11-11T00:34:22Z",
      "side": 1,
      "message": "Ah! ok, could we add that in the comment here for future readers.\n\nThat was confusing to me",
      "parentUuid": "d6723cc6_cbc8266a",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b81d9cb_b4153e1d",
        "filename": "interfaces.hpp",
        "patchSetId": 17
      },
      "lineNbr": 24,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-11T00:47:42Z",
      "side": 1,
      "message": "Now that, I can do. Added some nice comments.",
      "parentUuid": "cac3a745_1498017a",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 20
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74681dbb_f01c2d06",
        "filename": "pid/zone_interface.hpp",
        "patchSetId": 17
      },
      "lineNbr": 61,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-11T00:42:30Z",
      "side": 1,
      "message": "Does string_view work here?",
      "range": {
        "startLine": 61,
        "startChar": 44,
        "endLine": 61,
        "endChar": 62
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c1675f5_2e26b5d3",
        "filename": "pid/zone_interface.hpp",
        "patchSetId": 17
      },
      "lineNbr": 61,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-11-11T00:47:42Z",
      "side": 1,
      "message": "It might, but I don\u0027t want to introduce any bugs regarding string ownership, or introduce any new requirements upon the callers. A string reference works fine, and is not a copy.",
      "parentUuid": "74681dbb_f01c2d06",
      "range": {
        "startLine": 61,
        "startChar": 44,
        "endLine": 61,
        "endChar": 62
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c8c506e_fb2fe793",
        "filename": "pid/zone_interface.hpp",
        "patchSetId": 17
      },
      "lineNbr": 61,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-11T01:13:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6c1675f5_2e26b5d3",
      "range": {
        "startLine": 61,
        "startChar": 44,
        "endLine": 61,
        "endChar": 62
      },
      "revId": "4ef53364843cb47c2dd0590d0eecae79f423b713",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}