{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c21d6bea_7aedf4b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-18T00:13:37Z",
      "side": 1,
      "message": "Yay, Jenkins passes! Had to clean up the formatting a little, as clang-format locally did not agree with Jenkins, and also the old Makefile path still has to be maintained, as Jenkins does \"make check\" which still uses the old Make way.",
      "revId": "9586fb773add0078983eb4de59bd7bbf522db1a8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24cabc96_a589bfcc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-01-30T03:12:32Z",
      "side": 1,
      "message": "- Seems doesn\u0027t support for Static JSON file?\n\n- More thinking about this feature, with the current EM settings seem to be the same?\nEx:\n{\n  ...\n  \"Type\": \"Pid\",\n  \"Class\": \"margin\",\n  \"Inputs\": [\n    \"temp1\",\n    \"temp2\"\n  ],\n  \"TempToMargin\": {\n    85,\n    95\n  },\n  \"SetPoint\": 10.0,\n  \"Zones\": [\n    \"Zone 0\"\n  ]\n  ...\n}\n\nSame as,\n{\n  ...\n  \"Type\": \"Pid\",\n  \"Class\": \"temp\",\n  \"Inputs\": [\n    \"temp1\"\n  ],\n  \"SetPoint\": 75.0,\n  \"Zones\": [\n    \"Zone 0\"\n  ]\n  ...\n},\n{\n  ...\n  \"Type\": \"Pid\",\n  \"Class\": \"temp\",\n  \"Inputs\": [\n    \"temp2\"\n  ],\n  \"SetPoint\": 85.0,\n  \"Zones\": [\n    \"Zone 0\"\n  ]\n  ...\n}",
      "revId": "9586fb773add0078983eb4de59bd7bbf522db1a8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceff60b9_9d2debe0",
        "filename": "conf.hpp",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 1001360
      },
      "writtenOn": "2023-01-25T23:33:08Z",
      "side": 1,
      "message": "If we design SensorInput as base class and have derived classes for each type of sensor? Will that reduce the complexity of dbus/dbusconfiguration.cpp::init(). \n\nFor example today convertTempToMargin is applicable to only PidClass \u003d Margin, but if we decide that we need to convertPowerToMargin, then this structure may become more complex.\n\nBut this will be larger change.",
      "revId": "9586fb773add0078983eb4de59bd7bbf522db1a8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e253a824_94de3db6",
        "filename": "conf.hpp",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-26T06:54:02Z",
      "side": 1,
      "message": "True, I thought about adding a multiplier/offset in there as well. That would be for a future feature. The advantage of the struct here is that I can add more to it as needed, and not have it just be a number.\n\nI think adding base/derived classes for this would increase complexity, not reduce it.",
      "parentUuid": "ceff60b9_9d2debe0",
      "revId": "9586fb773add0078983eb4de59bd7bbf522db1a8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60846213_43d272ed",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 126,
      "author": {
        "id": 1001360
      },
      "writtenOn": "2023-01-25T23:33:08Z",
      "side": 1,
      "message": "Not all `std::cerr` are controlled by debugEnabled.",
      "revId": "9586fb773add0078983eb4de59bd7bbf522db1a8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42adf5c7_37151019",
        "filename": "pid/builder.cpp",
        "patchSetId": 10
      },
      "lineNbr": 126,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-26T06:54:02Z",
      "side": 1,
      "message": "That is true. The program prints some output unconditionally. That\u0027s the way it\u0027s always been. To hide all output under debugEnabled would be the subject of another change, not related to this change.",
      "parentUuid": "60846213_43d272ed",
      "revId": "9586fb773add0078983eb4de59bd7bbf522db1a8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}