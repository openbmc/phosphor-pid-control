{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5972a538_9a540681",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-02T05:07:36Z",
      "side": 1,
      "message": "This suddenly makes ZoneFlags required on all configurations, which is going to break a lot of people (everyone with downstream patches, assuming you go through and fix all the upstream ones).  Are you sure you don\u0027t want to define something optional?  That seems relatively straightforward to do.\n\nAlso, this is generally not how we\u0027d specify the dbus interface, we\u0027d specify each feature as a field, not one bitfield squished together.  That makes the interface much more clear.\n\nSee comment on the next patchset though, I\u0027m kinda wondering if this feature isnt\u0027t already covered by existing code.",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b944a00c_ae5ca87a",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-04-02T05:23:42Z",
      "side": 1,
      "message": "I originally made it a separate boolean flag but talking to Josh, it seemed like this would allow us to easily add future flags.\n\nYes, unfortunately I didn\u0027t quite understand this part of the code and where / how we were setting this property in the D-Bus so I\u0027m not surprised I did it wrong.",
      "parentUuid": "5972a538_9a540681",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87ea61a9_3d05ff1e",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T22:48:37Z",
      "side": 1,
      "message": "I\u0027d much rather have it be a number, not just a boolean. The reason is, it will make future additions much easier, saving toil. Also, it will avoid a proliferation of boolean parameters.\n\nAnd, a huge reason to want a more future-proof design is the extreme brittleness of D-Bus interfaces, that you were telling me about earlier, when I wanted to add the \"Mutable\" field to the Value interface, in dbus-sensors. If it\u0027s true that you can\u0027t make any changes to an interface after it has been used in code that\u0027s widespread, then it will be a real mess to have to invent a new interface for each boolean field that people might want to add. It will lead to a proliferation of interfaces, and each of them requires a separate D-Bus call to read, further slowing down the system. It would be so much easier just to grab all the bits at once.",
      "parentUuid": "b944a00c_ae5ca87a",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "734c48a3_c72740da",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-04-02T23:12:48Z",
      "side": 1,
      "message": "\u003e I\u0027d much rather have it be a number, not just a boolean. The reason is, it will make future additions much easier, saving toil. Also, it will avoid a proliferation of boolean parameters.\n\nWe can store it however we like inside the daemon, but in terms of dbus, we don\u0027t do these flag parameters, nor do we do bool generally (unless it\u0027s brutally obvious what it is).  As a general rule, these would be enum types, which I think would alleviate your proliferation concerns.  If you\u0027d like to see us do bitfields more (or ever), this patchset isn\u0027t the place to set that precedent, you would do it in phosphor-dbus-interfaces.\n\n\u003e \n\u003e And, a huge reason to want a more future-proof design is the extreme brittleness of D-Bus interfaces, that you were telling me about earlier, \n\nIt\u0027s code like this that makes dbus interfaces \"brittle\", which make changes to a single interface definition without updating everything else, or making the new interface optional, and now we have two definitions of what a Zone interface can be.\n\n\u003e when I wanted to add the \"Mutable\" field to the Value interface, in dbus-sensors. If it\u0027s true that you can\u0027t make any changes to an interface after it has been used in code that\u0027s widespread, then it will be a real mess to have to invent a new interface for each boolean field that people might want to add.\n\nI\u0027m not following this.  What you call \"a real mess\" is something we do all time time, mostly seamlessly.  New interfaces are easy to do, and optional, which we have pretty good processes for.  Also, we have made changes in widespread interfaces, your change wasn\u0027t the first change to the sensor Value interface, it just requires work.\nAdding new fields to existing schemas, or changing the prototype of them, is something that we aren\u0027t very good at, which is what this patchset is doing currently.  In fact, the original dbus bindings we used couldn\u0027t even handle this kind of interface change in a backward compatible way.  Nowadays we know how to handle this kind of thing better, but it\u0027s still error prone.\n\n\u003e It will lead to a proliferation of interfaces, and each of them requires a separate D-Bus call to read,\n\nI\u0027m not sure where you got that information, but it\u0027s wrong, you can read all the dbus interfaces in a single GetManagedObjects call, like most daemons that care about performance tend to do.  Alternatively, GetAll, with an empty interface name will also grab you all the properties in a more error prone fashion, but in a way that only grabs you a single object.\n\n\u003e further slowing down the system. It would be so much easier just to grab all the bits at once.\n\nHappy to debate what would be easier, but this patchset isn\u0027t the place to do it.  We should follow the current best practices for dbus interfaces.",
      "parentUuid": "87ea61a9_3d05ff1e",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "394cef48_fd7dd45c",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-07T00:09:02Z",
      "side": 1,
      "message": "You have valid points. How about this: Rename \"ZoneFlags\" to \"Options\" or \"ZoneOptions\". Instead of a number acting as a bitfield, make it an array of strings. The presence of a certain string in the array indicates that a particular option is enabled. This lets new options be arbitrarily added without having to redefine an interface that\u0027s already in use. It\u0027s also a lot cleaner-looking than a bitfield, which can rapidly become obscure and inelegant. Would this work better?",
      "parentUuid": "734c48a3_c72740da",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dd71681_180e0f22",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-04-15T19:38:33Z",
      "side": 1,
      "message": "You should just add more optional keys to your dictionary. Generally instead of a bitfield you would just have definitions like \"capMaxFailsafe\": \"true\", or if that thing takes its own parameters you pass a dict to it.",
      "parentUuid": "394cef48_fd7dd45c",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8006d6b_92f04f71",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-03T17:22:53Z",
      "side": 1,
      "message": "I\u0027m not really a big fan of that either;  The whole point of dbus is doing the exact opposite of what you\u0027re wanting, in that it\u0027s explicit, and ideally well documented what each param does, and each param is fixed.  Keep in mind, all of these parameters will need to be available to Redfish, and updated in entity-manager.  Redfish can\u0027t just push arbitrary values to REST, as we\u0027re held to a schema there, so the APIs will need to be well defined, and you\u0027ll need to update three components every time you add a parameter anyway (This repo to add the feature, entity-manager to document and move all the platforms forward that already have configs, and Redfish to add the parameter to the PID rest API).\n\nI don\u0027t really see moving to any sort of dict or flags API fixing that.",
      "parentUuid": "6dd71681_180e0f22",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96d837e4_836af573",
        "filename": "dbus/dbusconfiguration.cpp",
        "patchSetId": 12
      },
      "lineNbr": 574,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-08-09T22:43:37Z",
      "side": 1,
      "message": "Trying to remember + revive this discussion as we try to upstream this patch.\n\nInitial proposal I had was to just create a build flag / define that we can set at build time as we believe this is more of a bugfix than a feature (summary in code being: https://gerrit.openbmc.org/c/openbmc/phosphor-pid-control/+/41810/17/pid/fancontroller.cpp) where we believe at failsafe, we should be setting the fan speed to failsafe RPM rather than a calculated value that may be higher than failsafe.\n\nSince other platforms and companies may want the original (old) behavior, I thought a build flag / define would be the \"easiest\" solution. If I remember correctly, Josh was not a fan of this idea because we do not have any build flags in this repo yet, and wanted to keep it that way.\n\nSince a build flag would not require a D-Bus property to be added, I feel this is the easiest / simplest way, but please let me know if this is still a bad idea.",
      "parentUuid": "d8006d6b_92f04f71",
      "range": {
        "startLine": 574,
        "startChar": 51,
        "endLine": 574,
        "endChar": 55
      },
      "revId": "9cba4d78adb47f5162f24827f21b889c641e0502",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}